generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId   String  @id
  name     String?
  email    String
  verified Boolean @default(false)
  tasks    Task[]

  @@map("User")
}

model Task {
  id      String    @id @default(uuid())
  userId  String
  action  Action[]
  user    User      @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  taskRun TaskRun[]
  trigger Trigger?

  @@map("Task")
}

model Trigger {
  id        String           @id @default(uuid())
  taskId    String           @unique
  triggerId String
  task      Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  type      AvailableTrigger @relation(fields: [triggerId], references: [id])

  @@map("Trigger")
}

model Action {
  id           String          @id @default(uuid())
  actionId     String
  taskId       String
  sortingOrder Int             @default(0)
  action       AvailableAction @relation(fields: [actionId], references: [id])
  task         Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("Action")
}

model AvailableAction {
  id     String   @id @default(uuid())
  name   String
  Action Action[]

  @@map("AvailableAction")
}

model AvailableTrigger {
  id      String    @id @default(uuid())
  name    String
  Trigger Trigger[]

  @@map("AvailableTrigger")
}

model TaskRun {
  id            String         @id @default(uuid())
  taskId        String
  metadata      Json?
  task          Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskRunOutbox TaskRunOutbox?

  @@map("TaskRun")
}

model TaskRunOutbox {
  id        String  @id @default(uuid())
  taskRunId String  @unique
  task      TaskRun @relation(fields: [taskRunId], references: [id], onDelete: Cascade)

  @@map("TaskRunOutbox")
}
